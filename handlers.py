from aiogram import Router, types, F
from aiogram.filters import Command
from keyboards import keyboard, cart_keyboard
from config import PAYMENT_TOKEN
from aiogram.types import LabeledPrice
import logging
from database import get_user_cart, update_user_cart, clear_user_cart, init_db

router = Router()
init_db()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

PRICE = {
    '1': 70000,
    '2': 55000,
    '3': 75000,
    '4': 80000,
    '5': 75000,
    '6': 75000
}

LIST = {
    '1': '–°—É—à–∏ —Å –ª–æ—Å–æ—Å–µ–º',
    '2': '–†–∞–º–µ–Ω',
    '3': '–°—É—à–∏ —Å –∫—Ä–µ–≤–µ—Ç–∫–æ–π',
    '4': '–†–æ–ª–ª—ã —Å –ª–æ—Å–æ—Å–µ–º',
    '5': '–°—É—à–∏ —Å —Ç—É–Ω—Ü–æ–º',
    '6': '–†–æ–ª–ª—ã —Å —Ç—É–Ω—Ü–æ–º'
}


@router.message(Command('start'))
async def start(message: types.Message):
    await message.answer(
        "üç£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tomimo & Tokoso!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "1. –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üõçÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã'\n"
        "2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üõí –ö–æ—Ä–∑–∏–Ω–∞'",
        reply_markup=keyboard
    )


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
@router.message(Command('cart'))
async def show_cart(message: types.Message):
    cart = get_user_cart(message.from_user.id)
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ üõí\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É 'üõçÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã'",
                             reply_markup=keyboard)
        return

    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>:\n\n"
    total = 0
    for item_id, quantity in cart.items():
        item_total = PRICE[item_id] * quantity
        text += f"‚ñ™ {LIST[item_id]} x{quantity} = {item_total / 100:.2f} —Ä—É–±.\n"
        total += item_total

    text += f"\n<b>–ò—Ç–æ–≥–æ: {total / 100:.2f} —Ä—É–±.</b>"
    await message.answer(text, reply_markup=cart_keyboard)


@router.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        item_id = message.web_app_data.data
        logger.info(f"Received WebApp data: {item_id}")

        if item_id not in PRICE:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        cart = get_user_cart(message.from_user.id)
        cart[item_id] = cart.get(item_id, 0) + 1
        update_user_cart(message.from_user.id, cart)

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '{LIST[item_id]}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!\n"
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {cart[item_id]}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã\n"
            "2. –ü–µ—Ä–µ–π—Ç–∏ –≤ üõí –ö–æ—Ä–∑–∏–Ω—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"Error in handle_web_app_data: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞")


@router.message(F.text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def checkout(message: types.Message):
    cart = get_user_cart(message.from_user.id)
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    labeled_prices = []
    description = "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    total = 0

    for item_id, quantity in cart.items():
        item_total = PRICE[item_id] * quantity
        labeled_prices.append(LabeledPrice(label=f"{LIST[item_id]} x{quantity}", amount=item_total))
        description += f"{LIST[item_id]} x{quantity} - {item_total / 100:.2f} —Ä—É–±.\n"
        total += item_total

    description += f"\n–ò—Ç–æ–≥–æ: {total / 100:.2f} —Ä—É–±."

    try:
        await message.bot.send_invoice(
            chat_id=message.chat.id,
            title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            description=description,
            provider_token=PAYMENT_TOKEN,
            currency="rub",
            prices=labeled_prices,
            payload="cart_payment",
            start_parameter="create_invoice"
        )
    except Exception as e:
        logger.error(f"Error in checkout: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")


@router.message(F.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
async def clear_cart(message: types.Message):
    clear_user_cart(message.from_user.id)
    await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=keyboard)


@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)


@router.pre_checkout_query()
async def pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: types.Message):
    clear_user_cart(message.from_user.id)
    await message.answer(
        "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
        "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
        reply_markup=keyboard
    )